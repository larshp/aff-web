/* eslint-disable curly */
import fs from "fs";
import path from "path";
import {fileURLToPath} from "url";
import {initializeABAP} from "./init.mjs";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

async function run() {
  await initializeABAP();
  let lt_input = new abap.types.Table(new abap.types.Structure({class_name: new abap.types.Character(30), testclass_name: new abap.types.Character(30), method_name: new abap.types.Character(30)}), {"withHeader":false,"type":"STANDARD","isUnique":false,"keyFields":[]});
  let ls_input = new abap.types.Structure({class_name: new abap.types.Character(30), testclass_name: new abap.types.Character(30), method_name: new abap.types.Character(30)});
  let ls_result = new abap.types.Structure({list: new abap.types.Table(new abap.types.Structure({class_name: new abap.types.Character(30), testclass_name: new abap.types.Character(30), method_name: new abap.types.Character(30), expected: new abap.types.String(), actual: new abap.types.String(), status: new abap.types.String(), runtime: new abap.types.Integer(), message: new abap.types.String(), js_location: new abap.types.String()}), {"withHeader":false,"type":"STANDARD","isUnique":false,"keyFields":[]}), json: new abap.types.String()});
  await import("./zcl_aff_abap_doc_parser.clas.testclasses.mjs");
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TITLE_AND_DESCRIPTION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("DEFAULT_MINIMUM");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("REQUIRED_MAX_EXCLMIN");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("SHOWALWAYS_EXCLMAX_MULTIPLEOF");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("ENUM_VALUES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("CALLBACK_CLASS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("DEFAULT_WITH_LINK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_TITLES_AND_SHOWALWAYS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_NUMBER_ANNOTATIONS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_DEFAULT_MIXED");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_DEFAULT_LINK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_DEFAULT_VALUE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_VALUE_LINKS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_CALLBACKCLASSES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_REQUIRED_ANNOTATIONS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("UNKNOWN_ANNOTATION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("WRONG_USAGE_CALLBACK_CLASS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("WRONG_USAGE_DEFAULT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("WRONG_USAGE_ENUM_VALUES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("WRONG_VALUE_NUMBER_ANNOTATION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("WRONG_LINKS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("DESCRIPTION_AT_FALSE_POSITION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TEXT_BETWEEN_ANNOTATIONS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TITLE_AT_WRONG_POSITION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("OVERWRITING_ENUM_VALUE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().testclass_name.set("LTCL_AFF_ABAP_DOC_PARSER");
  ls_input.get().method_name.set("TOO_MANY_ENUM_VALUES");
  abap.statements.append({source: ls_input, target: lt_input});
  await import("./zcl_aff_abap_doc_reader.clas.testclasses.mjs");
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_ABAP_DOC_4_ELEMENT_TYPES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_ABAP_DOC_4_ELEMENT_DATA");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_ABAP_DOC_4_SUB_ELEM_TYPES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_ABAP_DOC_4_WRONG_ELEM_NAME");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_ABAP_DOC_4_ELEM_WO_ADOC");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_SIMPLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("GET_STRUCTURE_TYPES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_ABAP_DOC_READER");
  ls_input.get().testclass_name.set("LTCL_ABAP_DOC_READER");
  ls_input.get().method_name.set("STRUCTURE_AND_FIELDS");
  abap.statements.append({source: ls_input, target: lt_input});
  await import("./zcl_aff_generator.clas.testclasses.mjs");
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("ELEMENT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("INCLUDE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("TABLE_BUILD_IN_TYPE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("INCLUDE_IN_INCLUDE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("STRUCTURE_IN_STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("TABLE_STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("STRUCTURE_WITH_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("INCLUDE_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("TABLE_IN_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("STRUC_TAB_STRUC_TAB");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("UNSUPPORTED_TYPE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("COMPLEX_STRUCTURE_AFF_CLASS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("MANDATORY_FIELDS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("NO_HEADER");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("NO_FORMAT_VERSION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_GENERATOR");
  ls_input.get().testclass_name.set("LTCL_TYPE_GENERATOR");
  ls_input.get().method_name.set("NO_STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  await import("./zcl_aff_log.clas.testclasses.mjs");
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("ADD_INFO");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("ADD_WARNING");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("ADD_ERROR");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("ADD_EXCEPTION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("JOINS_LOG");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("CLEARS_LOG");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("GET_MAX_SEVERITY");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("HAS_MESSAGES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("TWO_MESSAGES_FOR_ONE_OBJECT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("ADD_CATCHED_EXCEPTION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("ADD_CLASSIC_EXCEPTION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("ADD_EXCEPTION_AS_INFO");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_LOG");
  ls_input.get().testclass_name.set("LTCL_LOG_UNIT_TEST");
  ls_input.get().method_name.set("GET_MESSAGE_TEXT");
  abap.statements.append({source: ls_input, target: lt_input});
  await import("./zcl_aff_test_types.clas.testclasses.mjs");
  ls_input.get().class_name.set("ZCL_AFF_TEST_TYPES");
  ls_input.get().testclass_name.set("LTCL_SANITY");
  ls_input.get().method_name.set("TEST1");
  abap.statements.append({source: ls_input, target: lt_input});
  await import("./zcl_aff_writer.clas.testclasses.mjs");
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CAMEL_CASE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_OUTPUT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_TYPE_INFO_STRING_LIKE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_TYPE_INFO_STRING_LIKE_ENUM");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_TYPE_INFO_BOOLEAN1");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_TYPE_INFO_BOOLEAN2");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_TYPE_INFO_BOOLEAN3");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_TYPE_INFO_NUMERIC");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_TYPE_INFO_DATE_TIME");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("STACK_STORES_OPERATIONS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("APPEND_TO_PREVIOUS_LINE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALL_READER_AND_DECODE1");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALL_READER_AND_DECODE2");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALL_READER_AND_DECODE3");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALL_READER_AND_DECODE4");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALL_READER_AND_DECODE5");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALL_READER_AND_DECODE6");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALL_READER_AND_DECODE7");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("DELETE_FIRST_OF_STRUC_STACK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_ALL_PATH_INFORMATION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_ABAP_DOC_FOR_ABSOLUTE_NAME");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("COMPARE_ABAP_DOC");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALLBACK_CLASS_IS_VALID");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("CALLBACK_CLASS_IS_INVALID");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("VALIDATE_DEFAULT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("VALIDATE_SOURCE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("GET_STRUC_OF_ENUM_VALUES_CL");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER");
  ls_input.get().testclass_name.set("LTCL_TYPE_WRITER");
  ls_input.get().method_name.set("HANDLE_INCLUDE");
  abap.statements.append({source: ls_input, target: lt_input});
  await import("./zcl_aff_writer_json_schema.clas.testclasses.mjs");
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("USE_DDIC_INFO_FOR_ELEMENT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("DATE_TIME_ELEMENT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("STRUCTURE_IN_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("NESTED_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("USE_DDIC_INFO_FOR_MAX_LENGTH");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("MAX_LENGTH");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("NUMBER_MAX_VALUE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("ENUM_ELEMENT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("DATE_TIME_FROM_ABAP_TO_JSON");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("VALIDATE_INVALID_JSON_SCHEMA");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("VALIDATE_VALID_JSON_SCHEMA");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER");
  ls_input.get().method_name.set("NESTED_BOOLEAN");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_DIFFERENT_ENUM");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STANDARD_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NESTED_STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("SIMPLE_STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("SIMPLE_STRUCTURE_SINGLE_FIELD");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("SIMPLE_STRUCTURE_TWO_FIELDS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRING_ELEMENT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("SIMPLE_STRUCTURE_DOLLAR");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("COMPLEX_TYPE_WITH_ENUM");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NUMBER_ELEMENT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("DATE_TIME_ELEMENT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NESTED_NESTED_STRUCTURE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("TABLE_IN_NESTED_STRU_WITH_AD");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NESTES_TABLE_WITH_AD");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("FORMAT_VERSION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NUMERICAL_TEXT_FIELD");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_NUMBERS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_DIFFERENT_DEFAULT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NESTED_STRUC_WITH_DEFAULT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("SIMPLE_TABLE_WITH_CALLBACKCLAS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCT_WITH_TABLE_CALLBACK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("ELEMENT_WITH_CALLBACKCLAS");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("ELEMENT_IN_STRUCTURE_CALLBACK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("TABLE_OF_STRUC_WITH_CALLBACK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("TABLE_WITH_CALL_OF_STRUC");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NESTED_TABLE_WITH_CALLBACK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUC_WITH_STRUC_CALLBACK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_WRONG_ENUM_LINK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_WRONG_DEFAULT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_WRONG_CALLBACK");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("HASHED_TABLE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_TABLES");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_NO_TITLE_DESCR");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("ELEMENT_NO_TITLE_DESCR");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("TABLE_NO_TITLE_DESCR");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("TITLE_AND_DESC_ESCAPED");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("NUMBER_ELEMENT_DEFAULT");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("UNKNOWN_ANNOTATION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("UNKNOWN_ABAP_DOC_TAG");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("TYPE_OF_ENUMTYPE_AND_CO_DIFFER");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_INCLUDE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("DESCRIPTION_TOO_LONG");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUCTURE_WITH_DEFAULT_PROBLEM");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("GET_EXTREMA_INTEGER");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("GET_EXTREMA_DECFLOAT16");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("GET_EXTREMA_FTYPE");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("GET_EXTREMA_PACKED");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("GET_EXTREMA_INTEGER1");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("CALCULATE_MAX_LENGTH");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("ORIGINAL_DESCRIPTION");
  abap.statements.append({source: ls_input, target: lt_input});
  ls_input.get().class_name.set("ZCL_AFF_WRITER_JSON_SCHEMA");
  ls_input.get().testclass_name.set("LTCL_JSON_WRITER_ABAP_DOC");
  ls_input.get().method_name.set("STRUC_WITH_OWN_ENUM_VALUES");
  abap.statements.append({source: ls_input, target: lt_input});


  ls_result.set(await abap.Classes["KERNEL_UNIT_RUNNER"].run({it_input: lt_input}));
  fs.writeFileSync(__dirname + path.sep + "output.json", ls_result.get().json.get());
}

run().then(() => {
  process.exit(0);
}).catch((err) => {
  console.log(err);
  process.exit(1);
});