const {zcl_aff_writer} = await import("./zcl_aff_writer.clas.mjs");
const {zcl_aff_writer_json_schema} = await import("./zcl_aff_writer_json_schema.clas.mjs");
const {cx_root} = await import("./cx_root.clas.mjs");
// zcl_aff_writer_json_schema.clas.testclasses.abap

class ltcl_json_writer {
  static INTERNAL_TYPE = 'CLAS';
  static IMPLEMENTED_INTERFACES = [];
  async constructor_(INPUT) {
    this.me = new abap.types.ABAPObject();
    this.me.set(this);
    this.cut = new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_WRITER_JSON_SCHEMA"});
    this.test_generator = new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_GENERATOR"});
    this.schema_id = ltcl_json_writer.schema_id;
    return this;
  }
  async setup() {
    this.cut.set(await (new abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA']()).constructor_({schema_id: ltcl_json_writer.schema_id}));
    this.test_generator.set(await (new abap.Classes['ZCL_AFF_GENERATOR']()).constructor_({writer: this.cut}));
  }
  async enum_element() {
    
    let undefined = new abap.types.Structure({"general": new abap.types.String({qualifiedName: "CATEGORY"}), "classic_badi": new abap.types.String({qualifiedName: "CATEGORY"})});
    undefined.get().general.set(new abap.types.Character(1).set('1'));
    undefined.get().classic_badi.set(new abap.types.Character(1).set('2'));
    let temp44 = new abap.types.String({qualifiedName: "CATEGORY"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp45 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp30 = new abap.types.String();
    let temp31 = new abap.types.String();
    let temp32 = new abap.types.String();
    let temp53 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp44);
    act_schema.set((await this.test_generator.get().generate_type({data: temp44})));
    abap.statements.clear(temp45);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp45});
    temp30.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp30, target: temp45});
    temp31.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp31, target: temp45});
    temp32.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp32, target: temp45});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp45});
    abap.statements.append({source: new abap.types.String().set(`    "maxLength": 30`), target: temp45});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp45});
    abap.statements.append({source: temp53, target: temp45});
    exp_schema.set(temp45);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async date_time_element() {
    let temp54 = new abap.types.Date({qualifiedName: "D"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp55 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp33 = new abap.types.String();
    let temp34 = new abap.types.String();
    let temp35 = new abap.types.String();
    let temp63 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp54);
    act_schema.set((await this.test_generator.get().generate_type({data: temp54})));
    abap.statements.clear(temp55);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp55});
    temp33.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp33, target: temp55});
    temp34.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp34, target: temp55});
    temp35.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp35, target: temp55});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp55});
    abap.statements.append({source: new abap.types.String().set(`    "format" :"date-time"`), target: temp55});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp55});
    abap.statements.append({source: temp63, target: temp55});
    exp_schema.set(temp55);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async use_ddic_info_for_element() {
    let temp64 = new abap.types.Character(1, {"qualifiedName":"ABAP_LANGUAGE_VERSION"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp65 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp36 = new abap.types.String();
    let temp37 = new abap.types.String();
    let temp38 = new abap.types.String();
    let temp83 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp64);
    act_schema.set((await this.test_generator.get().generate_type({data: temp64})));
    abap.statements.clear(temp65);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp65});
    temp36.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp36, target: temp65});
    temp37.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp37, target: temp65});
    temp38.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp38, target: temp65});
    abap.statements.append({source: new abap.types.String().set(`    "description": "ABAP Language Version",`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`    "enum": [`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`      "standardAbap",`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`      "abapForKeyUsers",`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`      "abapForCloudDevelopment"`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`    ],`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`    "enumDescriptions": [`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`      "StandardABAP",`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`      "ABAP for Key Users",`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`      "ABAP for Cloud Development"`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`    ]`), target: temp65});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp65});
    abap.statements.append({source: temp83, target: temp65});
    exp_schema.set(temp65);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async use_ddic_info_for_max_length() {
    let temp84 = new abap.types.Character(36, {"qualifiedName":"SYSUUID_C36"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp85 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp39 = new abap.types.String();
    let temp40 = new abap.types.String();
    let temp41 = new abap.types.String();
    let temp94 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp84);
    act_schema.set((await this.test_generator.get().generate_type({data: temp84})));
    abap.statements.clear(temp85);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp85});
    temp39.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp39, target: temp85});
    temp40.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp40, target: temp85});
    temp41.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp41, target: temp85});
    abap.statements.append({source: new abap.types.String().set(`    "description": "16 byte UUID in 36 chars according to RFC4122",`), target: temp85});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp85});
    abap.statements.append({source: new abap.types.String().set(`    "maxLength": 36`), target: temp85});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp85});
    abap.statements.append({source: temp94, target: temp85});
    exp_schema.set(temp85);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async structure_in_table() {
    
    let temp95 = new abap.types.Table(new abap.types.Structure({"my_element": new abap.types.String({qualifiedName: "MY_STRUCTURE-MY_ELEMENT"})}, "my_structure"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "my_table");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp96 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp42 = new abap.types.String();
    let temp43 = new abap.types.String();
    let temp44 = new abap.types.String();
    let temp112 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp95);
    act_schema.set((await this.test_generator.get().generate_type({data: temp95})));
    abap.statements.clear(temp96);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp96});
    temp42.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp42, target: temp96});
    temp43.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp43, target: temp96});
    temp44.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp44, target: temp96});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array",`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`        "type": "object",`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`        "properties": {`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`            "myElement": {`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`                "type": "string"`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`            }`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`        "additionalProperties": false`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp96});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp96});
    abap.statements.append({source: temp112, target: temp96});
    exp_schema.set(temp96);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async nested_boolean() {
    let temp113 = new abap.types.Structure({"hide_column": new abap.types.Character(1, {"qualifiedName":"ty_list_report-hide_column","ddicName":"ABAP_BOOL"})}, "ty_list_report");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp114 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp45 = new abap.types.String();
    let temp46 = new abap.types.String();
    let temp47 = new abap.types.String();
    let temp127 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp113);
    act_schema.set((await this.test_generator.get().generate_type({data: temp113})));
    abap.statements.clear(temp114);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp114});
    temp45.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp45, target: temp114});
    temp46.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp46, target: temp114});
    temp47.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp47, target: temp114});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp114});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp114});
    abap.statements.append({source: new abap.types.String().set(`        "hideColumn": {`), target: temp114});
    abap.statements.append({source: new abap.types.String().set(`            "type": "boolean"`), target: temp114});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp114});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp114});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp114});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp114});
    abap.statements.append({source: temp127, target: temp114});
    exp_schema.set(temp114);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async nested_table() {
    
    
    let temp128 = new abap.types.Table(new abap.types.Table(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "nested_table"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "first_table");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp129 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp48 = new abap.types.String();
    let temp49 = new abap.types.String();
    let temp50 = new abap.types.String();
    let temp142 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp128);
    act_schema.set((await this.test_generator.get().generate_type({data: temp128})));
    abap.statements.clear(temp129);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp129});
    temp48.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp48, target: temp129});
    temp49.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp49, target: temp129});
    temp50.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp50, target: temp129});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array",`), target: temp129});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp129});
    abap.statements.append({source: new abap.types.String().set(`        "type": "array",`), target: temp129});
    abap.statements.append({source: new abap.types.String().set(`        "items": {`), target: temp129});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string"`), target: temp129});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp129});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp129});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp129});
    abap.statements.append({source: temp142, target: temp129});
    exp_schema.set(temp129);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async max_length() {
    let temp143 = new abap.types.Structure({"name": new abap.types.Character(30, {"qualifiedName":"component_description-name"}), "description": new abap.types.Character(60, {"qualifiedName":"component_description-description"}), "numeric_text": new abap.types.Numc({length: 10, qualifiedName: "component_description-numeric_text"})}, "component_description");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp144 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp51 = new abap.types.String();
    let temp52 = new abap.types.String();
    let temp53 = new abap.types.String();
    let temp167 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp143);
    act_schema.set((await this.test_generator.get().generate_type({data: temp143})));
    abap.statements.clear(temp144);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp144});
    temp51.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp51, target: temp144});
    temp52.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp52, target: temp144});
    temp53.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp53, target: temp144});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`        "name": {`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 30`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`        "description": {`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 60`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`        "numericText": {`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 10,`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`            "pattern": "^[0-9]+$" `), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp144});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp144});
    abap.statements.append({source: temp167, target: temp144});
    exp_schema.set(temp144);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async number_max_value() {
    let temp168 = new abap.types.Structure({"integer": new abap.types.Integer({qualifiedName: "COMPONENT_DESCRIPTION-INTEGER"}), "integer8": new abap.types.Integer({qualifiedName: "COMPONENT_DESCRIPTION-INTEGER8"}), "decfloat16": new abap.types.typeTodoDecFloat16Type(), "decfloat34": new abap.types.DecFloat34(), "ftype": new abap.types.Float({qualifiedName: "COMPONENT_DESCRIPTION-FTYPE"}), "packed": new abap.types.Packed({length: 14, decimals: 2, qualifiedName: "component_description-packed"}), "integer2": new abap.types.Integer({qualifiedName: "INT2"})}, "component_description");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp169 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp54 = new abap.types.String();
    let temp55 = new abap.types.String();
    let temp56 = new abap.types.String();
    let temp216 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp168);
    act_schema.set((await this.test_generator.get().generate_type({data: temp168})));
    abap.statements.clear(temp169);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp169});
    temp54.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp54, target: temp169});
    temp55.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp55, target: temp169});
    temp56.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp56, target: temp169});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        "integer": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        "integer8": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -9223372036854775808,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 9223372036854775807`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        "decfloat16": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "type": "number",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -9.999999999999999e384,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 9.999999999999999e384`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        "decfloat34": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "type": "number",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -9.999999999999999999999999999999999e6144,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 9.999999999999999999999999999999999e6144`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        "ftype": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "type": "number",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -1.7976931348623157e308,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 1.7976931348623157e308`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        "packed": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "type": "number",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -9999999999999999999999999.99,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 9999999999999999999999999.99,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "multipleOf": 0.01`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        "integer2": {`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "description": "2ByteSignedInteger",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -32768,`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 32767`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp169});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp169});
    abap.statements.append({source: temp216, target: temp169});
    exp_schema.set(temp169);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async date_time_from_abap_to_json() {
    let abap_date = new abap.types.String({qualifiedName: "STRING"});
    let temp217 = new abap.types.Date({qualifiedName: "D"});
    let temp57 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let element_description = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let exp_json = new abap.types.String({qualifiedName: "STRING"});
    let act_json = new abap.types.String({qualifiedName: "STRING"});
    let abap_date_year = new abap.types.String({qualifiedName: "STRING"});
    let abap_date_year_month = new abap.types.String({qualifiedName: "STRING"});
    let abap_time = new abap.types.String({qualifiedName: "STRING"});
    let temp218 = new abap.types.Time({qualifiedName: "T"});
    let temp58 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let abap_time_incomplete = new abap.types.String({qualifiedName: "STRING"});
    let abap_utclong = new abap.types.String({qualifiedName: "STRING"});
    let temp219 = new abap.types.UTCLong();
    let temp59 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    abap_date.set(new abap.types.String().set(`"20121221"`));
    abap.statements.clear(temp217);
    await abap.statements.cast(temp57, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: temp217})));
    element_description.set(temp57);
    exp_json.set(new abap.types.String().set(`2012-12-21`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_date, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_date_year.set(new abap.types.String().set(`"2012"`));
    exp_json.set(new abap.types.String().set(`2012`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_date_year, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_date_year_month.set(new abap.types.String().set(`"201212"`));
    exp_json.set(new abap.types.String().set(`2012-12`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_date_year_month, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_time.set(new abap.types.String().set(`"201500"`));
    abap.statements.clear(temp218);
    await abap.statements.cast(temp58, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: temp218})));
    element_description.set(temp58);
    exp_json.set(new abap.types.String().set(`20:15:00`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_time, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_time_incomplete.set(new abap.types.String().set(`"2015"`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_time_incomplete, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_utclong.set(new abap.types.String().set(`"2012-12-21T23:59:59.9999999"`));
    abap.statements.clear(temp219);
    await abap.statements.cast(temp59, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: temp219})));
    element_description.set(temp59);
    exp_json.set(new abap.types.String().set(`2012-12-21T23:59:59+00:00`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_utclong, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
  }
  async validate_invalid_json_schema() {
    let temp220 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp60 = new abap.types.String();
    let temp61 = new abap.types.String();
    let temp62 = new abap.types.String();
    let invalid_json_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let log = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG"});
    let is_valid = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    abap.statements.clear(temp220);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp220});
    temp60.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp60, target: temp220});
    temp61.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp61, target: temp220});
    temp62.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp62, target: temp220});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`        "name": {`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 30`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`        "description": {`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 60`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp220});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp220});
    invalid_json_schema.set(temp220);
    log.set((await this.cut.get().zif_aff_writer$get_log()));
    is_valid.set((await this.cut.get().zif_aff_writer$validate({source: invalid_json_schema, log: log})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_false({act: is_valid});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_true({act: (await log.get().zif_aff_log$has_messages())});
  }
  async validate_valid_json_schema() {
    let temp237 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp63 = new abap.types.String();
    let temp64 = new abap.types.String();
    let temp65 = new abap.types.String();
    let invalid_json_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let log = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG"});
    let is_valid = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    abap.statements.clear(temp237);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp237});
    temp63.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp63, target: temp237});
    temp64.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp64, target: temp237});
    temp65.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.append({source: temp65, target: temp237});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`        "name": {`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 30`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`        "description": {`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 60`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp237});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp237});
    invalid_json_schema.set(temp237);
    log.set((await this.cut.get().zif_aff_writer$get_log()));
    is_valid.set((await this.cut.get().zif_aff_writer$validate({source: invalid_json_schema, log: log})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_true({act: is_valid});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_false({act: (await log.get().zif_aff_log$has_messages())});
  }
}
abap.Classes['CLAS-ZCL_AFF_WRITER_JSON_SCHEMA-LTCL_JSON_WRITER'] = ltcl_json_writer;
ltcl_json_writer.schema_id = new abap.types.String({qualifiedName: "STRING"});
ltcl_json_writer.schema_id.set('schema/id.json');

class ltcl_json_writer_abap_doc {
  static INTERNAL_TYPE = 'CLAS';
  static IMPLEMENTED_INTERFACES = [];
  async constructor_(INPUT) {
    this.me = new abap.types.ABAPObject();
    this.me.set(this);
    this.cut = new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_WRITER_JSON_SCHEMA"});
    this.test_generator = new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_GENERATOR"});
    this.log = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG"});
    this.schema_id = ltcl_json_writer_abap_doc.schema_id;
    return this;
  }
  async setup() {
    this.cut.set(await (new abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA']()).constructor_({schema_id: ltcl_json_writer_abap_doc.schema_id}));
    this.test_generator.set(await (new abap.Classes['ZCL_AFF_GENERATOR']()).constructor_({writer: this.cut}));
  }
  async number_element_default() {
    let temp254 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>DEFAULT_LINK"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp255 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp66 = new abap.types.String();
    let temp67 = new abap.types.String();
    let temp68 = new abap.types.String();
    let temp265 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp254);
    act_schema.set((await this.test_generator.get().generate_type({data: temp254})));
    abap.statements.clear(temp255);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp255});
    temp66.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp66, target: temp255});
    temp67.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp67, target: temp255});
    temp68.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp68, target: temp255});
    abap.statements.append({source: new abap.types.String().set(`    "description": "Default type does not match constant type",`), target: temp255});
    abap.statements.append({source: new abap.types.String().set(`    "type": "integer",`), target: temp255});
    abap.statements.append({source: new abap.types.String().set(`    "minimum": -2147483648,`), target: temp255});
    abap.statements.append({source: new abap.types.String().set(`    "maximum": 2147483647`), target: temp255});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp255});
    abap.statements.append({source: temp265, target: temp255});
    exp_schema.set(temp255);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Type of constant CO_TEST does not match type of DEFAULT_LINK`), exp_component_name: new abap.types.String().set(`DEFAULT_LINK`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async original_description() {
    let temp266 = new abap.types.Structure({"original_language": new abap.types.Character(1, {"qualifiedName":"zcl_aff_test_types=>ty_original_language","conversionExit":"ISOLA"})}, "zcl_aff_test_types=>ty_header_60_src");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp267 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp69 = new abap.types.String();
    let temp70 = new abap.types.String();
    let temp71 = new abap.types.String();
    let temp285 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp266);
    act_schema.set((await this.test_generator.get().generate_type({data: temp266})));
    abap.statements.clear(temp267);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp267});
    temp69.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp69, target: temp267});
    temp70.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp70, target: temp267});
    temp71.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp71, target: temp267});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`  "properties": {`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`    "originalLanguage": {`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`      "title": "Original Language",`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`      "description": "Original language of the ABAP object",`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`      "type": "string",`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`      "minLength": 2,`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`      "maxLength": 2,`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`      "pattern": "^[a-z]+$"`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`  },`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`  "additionalProperties": false`), target: temp267});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp267});
    abap.statements.append({source: temp285, target: temp267});
    exp_schema.set(temp267);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async type_of_enumtype_and_co_differ() {
    let temp286 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>ENUM_"});
    try {
      abap.statements.clear(temp286);
      await this.test_generator.get().generate_type({data: temp286});
      await abap.Classes['CL_ABAP_UNIT_ASSERT'].fail();
    } catch (e) {
      if (e instanceof abap.Classes['ZCX_AFF_TOOLS']) {
      } else {
        throw e;
      }
    }
  }
  async unknown_annotation() {
    let temp287 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>UNKNOWN_ANNOTATION"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp288 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp72 = new abap.types.String();
    let temp73 = new abap.types.String();
    let temp74 = new abap.types.String();
    let temp295 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp287);
    act_schema.set((await this.test_generator.get().generate_type({data: temp287})));
    abap.statements.clear(temp288);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp288});
    temp72.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp72, target: temp288});
    temp73.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp73, target: temp288});
    temp74.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp74, target: temp288});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string"`), target: temp288});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp288});
    abap.statements.append({source: temp295, target: temp288});
    exp_schema.set(temp288);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation $hiddenabc is unknown`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`UNKNOWN_ANNOTATION`)});
  }
  async unknown_abap_doc_tag() {
    let temp296 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>DESCRIPTION_NOT_FOUND"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp297 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp75 = new abap.types.String();
    let temp76 = new abap.types.String();
    let temp77 = new abap.types.String();
    let temp306 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp296);
    act_schema.set((await this.test_generator.get().generate_type({data: temp296})));
    abap.statements.clear(temp297);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp297});
    temp75.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp75, target: temp297});
    temp76.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp76, target: temp297});
    temp77.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp77, target: temp297});
    abap.statements.append({source: new abap.types.String().set(`    "title": "title",`), target: temp297});
    abap.statements.append({source: new abap.types.String().set(`    "description": "description <p class=\\"shorttext2\\">Title</p>",`), target: temp297});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string"`), target: temp297});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp297});
    abap.statements.append({source: temp306, target: temp297});
    exp_schema.set(temp297);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async title_and_desc_escaped() {
    let temp307 = new abap.types.Numc({length: 4, qualifiedName: "zcl_aff_test_types=>num_text1"});
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp308 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp78 = new abap.types.String();
    let temp79 = new abap.types.String();
    let temp80 = new abap.types.String();
    let temp319 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp307);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp307})));
    abap.statements.clear(temp308);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp308});
    temp78.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp78, target: temp308});
    temp79.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp79, target: temp308});
    temp80.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp80, target: temp308});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Test title \\"\\\\",`), target: temp308});
    abap.statements.append({source: new abap.types.String().set(`    "description": "Test description \\"\\\\",`), target: temp308});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp308});
    abap.statements.append({source: new abap.types.String().set(`    "maxLength": 4, `), target: temp308});
    abap.statements.append({source: new abap.types.String().set(`    "pattern": "^[0-9]+$"`), target: temp308});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp308});
    abap.statements.append({source: temp319, target: temp308});
    exp_schema.set(temp308);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async format_version() {
    let temp320 = new abap.types.Structure({"format_version": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_FORMAT_VERSION-FORMAT_VERSION"}), "field1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_FORMAT_VERSION-FIELD1"})}, "zcl_aff_test_types=>ty_format_version");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp321 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp81 = new abap.types.String();
    let temp82 = new abap.types.String();
    let temp83 = new abap.types.String();
    let temp346 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp320);
    act_schema.set((await this.test_generator.get().generate_type({data: temp320})));
    abap.statements.clear(temp321);
    abap.statements.append({source: new abap.types.String().set(`   {`), target: temp321});
    temp81.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp81, target: temp321});
    temp82.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp82, target: temp321});
    temp83.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp83, target: temp321});
    abap.statements.append({source: new abap.types.String().set(`     "title": "Constant With Field Format Version",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`     "description": "Constant with field format_version",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`     "type": "object",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`     "properties": {`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`       "formatVersion": {`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "title": "ABAP File Format Version",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "description": "The ABAP file format version",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "const": "1"`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`       },`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`       "field1": {`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Other Field",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Other field",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "type": "integer",`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "minimum": -2147483648,`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`         "maximum": 2147483647`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`       }`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`     },`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`     "additionalProperties": false`), target: temp321});
    abap.statements.append({source: new abap.types.String().set(`   }`), target: temp321});
    abap.statements.append({source: temp346, target: temp321});
    exp_schema.set(temp321);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async number_element() {
    let temp347 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INTEGER"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp348 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp84 = new abap.types.String();
    let temp85 = new abap.types.String();
    let temp86 = new abap.types.String();
    let temp359 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp347);
    act_schema.set((await this.test_generator.get().generate_type({data: temp347})));
    abap.statements.clear(temp348);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp348});
    temp84.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp84, target: temp348});
    temp85.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp85, target: temp348});
    temp86.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp86, target: temp348});
    abap.statements.append({source: new abap.types.String().set(`    "title": "myInteger",`), target: temp348});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A simple Integer",`), target: temp348});
    abap.statements.append({source: new abap.types.String().set(`    "type": "integer",`), target: temp348});
    abap.statements.append({source: new abap.types.String().set(`    "minimum": -2147483648,`), target: temp348});
    abap.statements.append({source: new abap.types.String().set(`    "maximum": 2147483647`), target: temp348});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp348});
    abap.statements.append({source: temp359, target: temp348});
    exp_schema.set(temp348);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async string_element() {
    let temp360 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp361 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp87 = new abap.types.String();
    let temp88 = new abap.types.String();
    let temp89 = new abap.types.String();
    let temp371 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp360);
    act_schema.set((await this.test_generator.get().generate_type({data: temp360})));
    abap.statements.clear(temp361);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp361});
    temp87.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp87, target: temp361});
    temp88.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp88, target: temp361});
    temp89.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp89, target: temp361});
    abap.statements.append({source: new abap.types.String().set(`    "title": "myStringName",`), target: temp361});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a string",`), target: temp361});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp361});
    abap.statements.append({source: new abap.types.String().set(`    "maxLength": 3`), target: temp361});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp361});
    abap.statements.append({source: temp371, target: temp361});
    exp_schema.set(temp361);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async date_time_element() {
    let temp372 = new abap.types.Date({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_DATE"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp373 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp90 = new abap.types.String();
    let temp91 = new abap.types.String();
    let temp92 = new abap.types.String();
    let temp383 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp372);
    act_schema.set((await this.test_generator.get().generate_type({data: temp372})));
    abap.statements.clear(temp373);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp373});
    temp90.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp90, target: temp373});
    temp91.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp91, target: temp373});
    temp92.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp92, target: temp373});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Date",`), target: temp373});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a date",`), target: temp373});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp373});
    abap.statements.append({source: new abap.types.String().set(`    "format" :"date-time"`), target: temp373});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp373});
    abap.statements.append({source: temp383, target: temp373});
    exp_schema.set(temp373);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_structure() {
    let temp384 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp385 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp93 = new abap.types.String();
    let temp94 = new abap.types.String();
    let temp95 = new abap.types.String();
    let temp410 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp384);
    act_schema.set((await this.test_generator.get().generate_type({data: temp384})));
    abap.statements.clear(temp385);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp385});
    temp93.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp93, target: temp385});
    temp94.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp94, target: temp385});
    temp95.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp95, target: temp385});
    abap.statements.append({source: new abap.types.String().set(`    "title": "mySimpleStructure",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a simple structure",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`        "myFirstElement": {`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "title": "First Element",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the first element",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "minLength": 4`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`        "mySecondElement": {`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Second Element",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the second element",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp385});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp385});
    abap.statements.append({source: temp410, target: temp385});
    exp_schema.set(temp385);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_structure_single_field() {
    let temp411 = new abap.types.Structure({"foo_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"})}, "zcl_aff_test_types=>my_structure_single");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp412 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp96 = new abap.types.String();
    let temp97 = new abap.types.String();
    let temp98 = new abap.types.String();
    let temp430 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp411);
    act_schema.set((await this.test_generator.get().generate_type({data: temp411})));
    abap.statements.clear(temp412);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp412});
    temp96.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp96, target: temp412});
    temp97.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp97, target: temp412});
    temp98.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp98, target: temp412});
    abap.statements.append({source: new abap.types.String().set(`    "title": "mySimpleStructure",`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a simple structure",`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`        "fooElement": {`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Foo Element",`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the first element",`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`            "minLength": 4`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp412});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp412});
    abap.statements.append({source: temp430, target: temp412});
    exp_schema.set(temp412);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_structure_two_fields() {
    let temp431 = new abap.types.Structure({"foo1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE_TWO-FOO1"}), "foo2": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE_TWO-FOO2"})}, "zcl_aff_test_types=>my_structure_two");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp432 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp99 = new abap.types.String();
    let temp100 = new abap.types.String();
    let temp101 = new abap.types.String();
    let temp455 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp431);
    act_schema.set((await this.test_generator.get().generate_type({data: temp431})));
    abap.statements.clear(temp432);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp432});
    temp99.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp99, target: temp432});
    temp100.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp100, target: temp432});
    temp101.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp101, target: temp432});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a two field structure",`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`        "foo1": {`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "description": "foo1 element",`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`        "foo2": {`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "description": "foo2 element",`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp432});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp432});
    abap.statements.append({source: temp455, target: temp432});
    exp_schema.set(temp432);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async simple_structure_dollar() {
    let temp456 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE2-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure2");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp457 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp102 = new abap.types.String();
    let temp103 = new abap.types.String();
    let temp104 = new abap.types.String();
    let temp485 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp456);
    act_schema.set((await this.test_generator.get().generate_type({data: temp456})));
    abap.statements.clear(temp457);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp457});
    temp102.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp102, target: temp457});
    temp103.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp103, target: temp457});
    temp104.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp104, target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    "title": "mySimpleStructure",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a $ simple st",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`        "myFirstElement": {`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "title": "First Element",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the first element",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "maxLength": 3`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`        "mySecondElement": {`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Second Element",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the second element",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false,`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    "required": [`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`      "myFirstElement" `), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`    ]`), target: temp457});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp457});
    abap.statements.append({source: temp485, target: temp457});
    exp_schema.set(temp457);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation $ructure is unknown`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`MY_STRUCTURE2`)});
  }
  async nested_structure() {
    let temp486 = new abap.types.Structure({"nested_struc": new abap.types.Structure({"my_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_NESTED_STRUCTURE-MY_ELEMENT"})}, "zcl_aff_test_types=>my_nested_structure"), "my_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE3-MY_ELEMENT"})}, "zcl_aff_test_types=>my_structure3");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp487 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp105 = new abap.types.String();
    let temp106 = new abap.types.String();
    let temp107 = new abap.types.String();
    let temp520 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp486);
    act_schema.set((await this.test_generator.get().generate_type({data: temp486})));
    abap.statements.clear(temp487);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp487});
    temp105.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp105, target: temp487});
    temp106.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp106, target: temp487});
    temp107.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp107, target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    "title": "myStructure",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a complex structure",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`        "nestedStruc": {`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`            "title": "nestedStruc",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the nested structure",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`            "type": "object",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`            "properties": {`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`                "myElement": {`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`                    "title": "myElementComponente",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`                    "description": "This is a string element",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`                    "type": "string"`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`                }`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`            },`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`            "additionalProperties": false`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`        "myElement": {`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`          "title": "My Element",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`          "description": "This is my element",`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`          "type": "string"`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`       }`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false,`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    "required": [ `), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`      "myElement" `), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`    ]`), target: temp487});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp487});
    abap.statements.append({source: temp520, target: temp487});
    exp_schema.set(temp487);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async standard_table() {
    let temp521 = new abap.types.Table(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>my_standard_table");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp522 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp108 = new abap.types.String();
    let temp109 = new abap.types.String();
    let temp110 = new abap.types.String();
    let temp537 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp521);
    act_schema.set((await this.test_generator.get().generate_type({data: temp521})));
    abap.statements.clear(temp522);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp522});
    temp108.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp108, target: temp522});
    temp109.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp109, target: temp522});
    temp110.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp110, target: temp522});
    abap.statements.append({source: new abap.types.String().set(`    "title": "A Standard Table",`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A standard table of myString",`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array",`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`        "title": "myStringName",`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`        "description": "This is a string",`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string",`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 3`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp522});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp522});
    abap.statements.append({source: temp537, target: temp522});
    exp_schema.set(temp522);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async hashed_table() {
    let temp538 = new abap.types.Table(new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"HASHED","isUnique":true,"keyFields":["MY_FIRST_ELEMENT"]},"secondary":[]}, "zcl_aff_test_types=>my_hashed_table");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp539 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp111 = new abap.types.String();
    let temp112 = new abap.types.String();
    let temp113 = new abap.types.String();
    let temp570 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp538);
    act_schema.set((await this.test_generator.get().generate_type({data: temp538})));
    abap.statements.clear(temp539);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp539});
    temp111.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp111, target: temp539});
    temp112.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp112, target: temp539});
    temp113.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp113, target: temp539});
    abap.statements.append({source: new abap.types.String().set(`    "title": "A Hashed Table",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A hashed table of my_structure",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`    "uniqueItems" : true,`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`        "title": "mySimpleStructure",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`        "description": "This is a simple structure",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`        "type": "object",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`        "properties": {`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`            "myFirstElement": {`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "title": "First Element",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "description": "This is the first element",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "type": "string",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "minLength": 4`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`            }, `), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`            "mySecondElement": {`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "title": "Second Element",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "description": "This is the second element",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "type": "integer",`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "minimum": -2147483648,`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`                "maximum": 2147483647`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`            } `), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`        "additionalProperties": false`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp539});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp539});
    abap.statements.append({source: temp570, target: temp539});
    exp_schema.set(temp539);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_tables() {
    let temp571 = new abap.types.Structure({"first_table": new abap.types.Table(new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"SORTED","isUnique":true,"keyFields":["MY_SECOND_ELEMENT"]},"secondary":[]}, "zcl_aff_test_types=>my_sorted_table_unique"), "second_table": new abap.types.Table(new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"SORTED","isUnique":false,"keyFields":["MY_SECOND_ELEMENT"]},"secondary":[]}, "zcl_aff_test_types=>my_sorted_table_n_unique")}, "zcl_aff_test_types=>my_structure_with_tables");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp572 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp114 = new abap.types.String();
    let temp115 = new abap.types.String();
    let temp116 = new abap.types.String();
    let temp637 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp571);
    act_schema.set((await this.test_generator.get().generate_type({data: temp571})));
    abap.statements.clear(temp572);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp572});
    temp114.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp114, target: temp572});
    temp115.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp115, target: temp572});
    temp116.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp116, target: temp572});
    abap.statements.append({source: new abap.types.String().set(`    "title": "A Structure With Tables",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A structure with different table types",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`        "firstTable": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "title": "First Table",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "description": "First table",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "type": "array",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "uniqueItems": true,`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "items": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "title": "mySimpleStructure",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "description": "This is a simple structure",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "type": "object",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "properties": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    "myFirstElement": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "title": "First Element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "description": "This is the first element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "type": "string",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "minLength": 4`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    }, `), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    "mySecondElement": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "title": "Second Element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "description": "This is the second element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "type": "integer",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "minimum": -2147483648,`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "maximum": 2147483647`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    } `), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                },`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "additionalProperties": false`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            }`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`        "secondTable": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Second Table",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "description": "Second table",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "type": "array",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            "items": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "title": "mySimpleStructure",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "description": "This is a simple structure",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "type": "object",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "properties": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    "myFirstElement": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "title": "First Element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "description": "This is the first element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "type": "string",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "minLength": 4`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    }, `), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    "mySecondElement": {`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "title": "Second Element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "description": "This is the second element",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "type": "integer",`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "minimum": -2147483648,`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                        "maximum": 2147483647`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                    } `), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                },`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`                "additionalProperties": false`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`            }`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp572});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp572});
    abap.statements.append({source: temp637, target: temp572});
    exp_schema.set(temp572);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_different_enum() {
    let temp638 = new abap.types.Structure({"enum_without_all": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_default": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_required": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"})}, "zcl_aff_test_types=>structure_with_different_enum");
    let test = new abap.types.Structure({"enum_without_all": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_default": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_required": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"})}, "zcl_aff_test_types=>structure_with_different_enum");
    abap.statements.clear(temp638);
    test.set(temp638);
    await this.test_generator.get().generate_type({data: test});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg127, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_DIFFERENT_ENUM-ENUM_WITHOUT_ALL`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async complex_type_with_enum() {
    let temp639 = new abap.types.Structure({"header": new abap.types.Structure({"description": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>HEADER-DESCRIPTION"}), "original_language": new abap.types.Character(1, {"qualifiedName":"zcl_aff_test_types=>header-original_language","conversionExit":"ISOLA"}), "abap_language_version": new abap.types.Character(1, {"qualifiedName":"zcl_aff_test_types=>language_version"})}, "zcl_aff_test_types=>header"), "class_category": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>ty_class_properties-class_category"})}, "zcl_aff_test_types=>ty_class_properties");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp640 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp117 = new abap.types.String();
    let temp118 = new abap.types.String();
    let temp119 = new abap.types.String();
    let temp709 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp639);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp639})));
    abap.statements.clear(temp640);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp640});
    temp117.set(new abap.types.String().set(`   "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp117, target: temp640});
    temp118.set(new abap.types.String().set(`   "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp118, target: temp640});
    temp119.set(new abap.types.String().set(`   "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp119, target: temp640});
    abap.statements.append({source: new abap.types.String().set(`   "title": "Class Properties",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`   "description": "Class properties",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`   "type": "object",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`   "properties": {`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`     "header": {`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "title": "Header",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "description": "The header for an ABAP main object",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "type": "object",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "properties": {`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "description": {`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "title": "Description",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "description": "Description of the ABAP object",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "type": "string"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       },`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "originalLanguage": {`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Original Language",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Original language of the ABAP object",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "minLength": 2,`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "maxLength": 2,`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "pattern": "^[a-z]+$"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         },`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "abapLanguageVersion": {`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "title": "ABAP Language Version",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "description": "ABAP language version",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "type": "string",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "enum": [`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`             "standard",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`             "cloudDevelopment"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           ],`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "enumTitles": [`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`             "Standard",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`             "ABAP Cloud Development"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           ],`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "enumDescriptions": [`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`             "Standard",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`             "ABAP cloud development"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           ],`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`           "default": "standard"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       },`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "additionalProperties": false`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`     },`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`     "classCategory": {`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "title": "Class Category",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "description": "Class category",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "type": "string",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "enum": [`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "general",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "exitClass"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       ],`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "enumTitles": [ `), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "General",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "Exit Class"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       ],`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "enumDescriptions": [ `), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "General",`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`         "Exit class"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       ],`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`       "default": "general"`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`     }`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`   },`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false`), target: temp640});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp640});
    abap.statements.append({source: temp709, target: temp640});
    exp_schema.set(temp640);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async nested_nested_structure() {
    let temp710 = new abap.types.Structure({"field1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>LIST-FIELD1"}), "field2": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>list-field2"}), "list1": new abap.types.Structure({"element_of_list1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>LIST-LIST1-ELEMENT_OF_LIST1"}), "list2": new abap.types.Structure({"element_of_list2": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>LIST-LIST1-LIST2-ELEMENT_OF_LIST2"})}, "zcl_aff_test_types=>list-list1-list2")}, "zcl_aff_test_types=>list-list1"), "field3": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>list-field3"})}, "zcl_aff_test_types=>list");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp711 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp120 = new abap.types.String();
    let temp121 = new abap.types.String();
    let temp122 = new abap.types.String();
    let temp781 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp710);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp710})));
    abap.statements.clear(temp711);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp711});
    temp120.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp120, target: temp711});
    temp121.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp121, target: temp711});
    temp122.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp122, target: temp711});
    abap.statements.append({source: new abap.types.String().set(`    "title": "outerStructure", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`    "description": "ABAP Doc Comment TYPES list first level", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`    "properties": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      "field1": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Outer Element 1",  `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "description": "ABAP Doc field1", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer",`), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -2147483648, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 2147483647 `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      "field2": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Outer Element 2", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "description": "ABAP Doc field2", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "maxLength": 2 `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      "list1": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "title": "middleStructure", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "description": "ABAP Doc list second level", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "type": "object", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "properties": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`          "elementOfList1": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`             "title": "Middle Element", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "description": "ABAP Doc second level", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647 `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`          }, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`           "list2": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "title": "innerStructure", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "description": "ABAP Doc third level", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "type": "object", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "properties": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`              "elementOfList2": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`                "title": "Inner Element", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`                "description": "ABAP Doc third level", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`                "type": "string" `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`              } `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`             }, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "additionalProperties": false, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            "required": [ `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`              "elementOfList2"`), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`            ] `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`          } `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        }, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "additionalProperties": false, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "required": [ `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`           "elementOfList1" `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         ] `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      "field3": { `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Outer Element 3", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`         "description": "ABAP Doc field3",`), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 2 `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      } `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`     }, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false, `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`    "required": [`), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      "field2",`), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      "list1",`), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`      "field3"`), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`    ] `), target: temp711});
    abap.statements.append({source: new abap.types.String().set(`  } `), target: temp711});
    abap.statements.append({source: temp781, target: temp711});
    exp_schema.set(temp711);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async table_in_nested_stru_with_ad() {
    let temp782 = new abap.types.Structure({"field1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>OUTER_STRUC-FIELD1"}), "inner_struc": new abap.types.Structure({"element_of_inner_struc": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>OUTER_STRUC-INNER_STRUC-ELEMENT_OF_INNER_STRUC"}), "inner_table_var": new abap.types.Table(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>outer_struc-inner_struc-inner_table_var")}, "zcl_aff_test_types=>outer_struc-inner_struc"), "field2": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>outer_struc-field2"})}, "zcl_aff_test_types=>outer_struc");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp783 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp123 = new abap.types.String();
    let temp124 = new abap.types.String();
    let temp125 = new abap.types.String();
    let temp838 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp782);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp782})));
    abap.statements.clear(temp783);
    abap.statements.append({source: new abap.types.String().set(` { `), target: temp783});
    temp123.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp123, target: temp783});
    temp124.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp124, target: temp783});
    temp125.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp125, target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    "title": "outerStructure", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    "description": "ABAP Doc Comment TYPES list first level", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    "properties": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`      "field1": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Outer Element1",  `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "description": "ABAP Doc field1 first level", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer",`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -2147483648, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 2147483647 `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`      "innerStruc": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Inner Structure 1", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Inner structure", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`         "type": "object", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`         "properties": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`            "elementOfInnerStruc": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "title": "Inner Element", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "description": "ABAP Doc element second level", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "type": "integer",`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "minimum": -2147483648, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "maximum": 2147483647 `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`             }, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`             "innerTableVar": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "title": "inner Table", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "description": "ABAP Doc element second level", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              "type": "array", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`                "items": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`                 "type": "string" `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`                } `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`              } `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`          }, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`          "additionalProperties": false, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`          "required": [`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`            "elementOfInnerStruc",`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`            "innerTableVar"`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`          ] `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`      "field2": { `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Outer Element2", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "description": "ABAP Doc field2 first level",`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 2 `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`      } `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    }, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false, `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    "required": [`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`      "field2"`), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`    ] `), target: temp783});
    abap.statements.append({source: new abap.types.String().set(`  } `), target: temp783});
    abap.statements.append({source: temp838, target: temp783});
    exp_schema.set(temp783);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async nestes_table_with_ad() {
    let temp839 = new abap.types.Table(new abap.types.Table(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>nested_table"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>first_table");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp840 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp126 = new abap.types.String();
    let temp127 = new abap.types.String();
    let temp128 = new abap.types.String();
    let temp857 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp839);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp839})));
    abap.statements.clear(temp840);
    abap.statements.append({source: new abap.types.String().set(` { `), target: temp840});
    temp126.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp126, target: temp840});
    temp127.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp127, target: temp840});
    temp128.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp128, target: temp840});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Outer Table", `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is the outer table", `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array", `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`    "items": { `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`      "title": "Inner Table", `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`      "description": "This is the inner Table", `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`      "type": "array", `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`      "items": { `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string" `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`      } `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`    } `), target: temp840});
    abap.statements.append({source: new abap.types.String().set(`  } `), target: temp840});
    abap.statements.append({source: temp857, target: temp840});
    exp_schema.set(temp840);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_wrong_enum_link() {
    let temp858 = new abap.types.Structure({"element_one": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_WRONG_LINK-ELEMENT_ONE"}), "element_two": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_wrong"})}, "zcl_aff_test_types=>structure_with_wrong_link");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp859 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp129 = new abap.types.String();
    let temp130 = new abap.types.String();
    let temp131 = new abap.types.String();
    let temp883 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp858);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp858})));
    abap.statements.clear(temp859);
    abap.statements.append({source: new abap.types.String().set(` { `), target: temp859});
    temp129.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp129, target: temp859});
    temp130.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp130, target: temp859});
    temp131.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp131, target: temp859});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Structure with Wrong Link", `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a structure with wrong enum_values link", `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object", `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`    "properties": { `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`      "elementOne": { `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "title": "First Element",  `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "description": "First element", `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string"`), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`      "elementTwo": { `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Second Element",  `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Second element", `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string",`), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 2, `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`        "pattern": "^[0-9]+$" `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`      } `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`    }, `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false `), target: temp859});
    abap.statements.append({source: new abap.types.String().set(`  } `), target: temp859});
    abap.statements.append({source: temp883, target: temp859});
    exp_schema.set(temp859);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.Character(84).set('Constant ZCL_AFF_TEST_TYPES=>ENUM_VALUES_WRONG given in ABAP Doc link doesn\'t exist'), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_LINK-ELEMENT_TWO`)});
  }
  async structure_with_table() {
    let temp884 = new abap.types.Structure({"table1": new abap.types.Table(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>string_table"), "structure": new abap.types.Structure({"field": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INNER_STRUC-FIELD"})}, "zcl_aff_test_types=>inner_struc"), "table2": new abap.types.Table(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>string_table")}, "zcl_aff_test_types=>structure_with_doc_outside");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp885 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp132 = new abap.types.String();
    let temp133 = new abap.types.String();
    let temp134 = new abap.types.String();
    let temp931 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp884);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp884})));
    abap.statements.clear(temp885);
    abap.statements.append({source: new abap.types.String().set(`{ `), target: temp885});
    temp132.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp132, target: temp885});
    temp133.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp133, target: temp885});
    temp134.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp134, target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Structure With ABAP Doc Outside",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    "description": "Structure with ABAP Doc outside",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`      "table1": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Table1",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Table1",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "type": "array",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "items": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`          "type": "string"`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`      "structure": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Structure",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Structure",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "type": "object",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "properties": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`          "field": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Field",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`            "description": "Field",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`          }`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "additionalProperties": false`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`      "table2": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Table2",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Table2",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "type": "array",`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        "items": {`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`          "type": "string"`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`      }`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false, `), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    "required": [ `), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`      "table1" `), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`    ] `), target: temp885});
    abap.statements.append({source: new abap.types.String().set(`  }`), target: temp885});
    abap.statements.append({source: temp931, target: temp885});
    exp_schema.set(temp885);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async numerical_text_field() {
    let temp932 = new abap.types.Numc({length: 4, qualifiedName: "zcl_aff_test_types=>num_text"});
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp933 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp135 = new abap.types.String();
    let temp136 = new abap.types.String();
    let temp137 = new abap.types.String();
    let temp944 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp932);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp932})));
    abap.statements.clear(temp933);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp933});
    temp135.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp135, target: temp933});
    temp136.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp136, target: temp933});
    temp137.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp137, target: temp933});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Numerical Text Field",`), target: temp933});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A numerical text field of length 4",`), target: temp933});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp933});
    abap.statements.append({source: new abap.types.String().set(`    "maxLength": 4, `), target: temp933});
    abap.statements.append({source: new abap.types.String().set(`    "pattern": "^[0-9]+$"`), target: temp933});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp933});
    abap.statements.append({source: temp944, target: temp933});
    exp_schema.set(temp933);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_numbers() {
    let temp945 = new abap.types.Structure({"integer": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_NUMBERS-INTEGER"}), "float": new abap.types.typeTodoDecFloat16Type(), "packed_with_multiple": new abap.types.Packed({length: 4, decimals: 2, qualifiedName: "zcl_aff_test_types=>structure_with_numbers-packed_with_multiple"}), "packed_without_multiple": new abap.types.Packed({length: 4, decimals: 1, qualifiedName: "zcl_aff_test_types=>structure_with_numbers-packed_without_multiple"}), "integer_out": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INTEGER_OUTSIDE"}), "integer_out_with_doc": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INTEGER_OUTSIDE"})}, "zcl_aff_test_types=>structure_with_numbers");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp946 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp138 = new abap.types.String();
    let temp139 = new abap.types.String();
    let temp140 = new abap.types.String();
    let temp1002 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp945);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp945})));
    abap.statements.clear(temp946);
    abap.statements.append({source: new abap.types.String().set(`{ `), target: temp946});
    temp138.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp138, target: temp946});
    temp139.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp139, target: temp946});
    temp140.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp140, target: temp946});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Structure With Number Types",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a structure with different number types",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      "integer": {`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Integer With Maximum",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Integer with maximum",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "minimum":-2147483648 ,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "maximum":10`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      "float": {`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Float With Minimum And Exclusive Maximum",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Float with minimum and exclusive maximum",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "type": "number",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -0.42,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "exclusiveMaximum": 100.9`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      "packedWithMultiple": {`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Packed Number With Given Multiple",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Packed number with given multiple",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "type": "number",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "exclusiveMinimum": 0,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 99999.90,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "multipleOf": 0.1 `), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      "packedWithoutMultiple": {`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Packed Number With No Given Multiple",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Packed number with no given multiple",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "type": "number",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "exclusiveMinimum": 0,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 999999.9,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "multipleOf": 0.1 `), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      "integerOut": {`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Integer Defined Outside",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Integer defined outside and ABAP Doc number annotation outside",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -25,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 2147483647`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      "integerOutWithDoc": {`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Integer Defined Outside",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Integer defined outside but with ABAP Doc number annotation here",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer",`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -2147483648,`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 42 `), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`      }`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false `), target: temp946});
    abap.statements.append({source: new abap.types.String().set(`  }`), target: temp946});
    abap.statements.append({source: temp1002, target: temp946});
    exp_schema.set(temp946);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_different_default() {
    let temp1003 = new abap.types.Structure({"four_byte_int": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-FOUR_BYTE_INT"}), "eight_byte_int": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-EIGHT_BYTE_INT"}), "bin_float": new abap.types.Float({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-BIN_FLOAT"}), "byte_like": new abap.types.Hex({length: 2}), "byte_like2": new abap.types.XString({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-BYTE_LIKE2"}), "decimal_float_16": new abap.types.typeTodoDecFloat16Type(), "decimal_float_34": new abap.types.DecFloat34(), "packed_number": new abap.types.Packed({length: 3, decimals: 2, qualifiedName: "zcl_aff_test_types=>structure_different_default-packed_number"}), "numeric_text": new abap.types.Numc({length: 4, qualifiedName: "zcl_aff_test_types=>structure_different_default-numeric_text"}), "character_text": new abap.types.Character(5, {"qualifiedName":"zcl_aff_test_types=>structure_different_default-character_text"}), "string_text": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-STRING_TEXT"}), "date_field": new abap.types.Date({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-DATE_FIELD"}), "time_field": new abap.types.Time({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-TIME_FIELD"}), "date_time_field": new abap.types.UTCLong({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-DATE_TIME_FIELD"}), "bool_true": new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"}), "bool_false": new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"}), "enum_type": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>structure_different_default-enum_type"})}, "zcl_aff_test_types=>structure_different_default");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1004 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp141 = new abap.types.String();
    let temp142 = new abap.types.String();
    let temp143 = new abap.types.String();
    let temp1149 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1003);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp1003})));
    abap.statements.clear(temp1004);
    abap.statements.append({source: new abap.types.String().set(`    { `), target: temp1004});
    temp141.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp141, target: temp1004});
    temp142.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp142, target: temp1004});
    temp143.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp143, target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Structure With Default", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`    "description": "Structure to test default checks in simple transformation", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`    "properties": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "fourByteInt": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Four Byte Integer", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Four byte integer", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -2147483648, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 2147483647 , `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": 5 `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "eightByteInt": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Eight Byte Integer", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Eight byte integer", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -9223372036854775808, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 9223372036854775807 , `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": 55 `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`       }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "binFloat": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Binary Floating Point Number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Binary floating point number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -1.7976931348623157e308, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 1.7976931348623157e308, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": 4.3 `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "byteLike": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Byte Like", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Byte like", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 4, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "FFFF" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "byteLike2": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Byte Like2", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Byte like2", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "FF00FF"`), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`       }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "decimalFloat16": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Decimal Floating Point Number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Decimal floating point number with 16 places", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -9.999999999999999e384, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 9.999999999999999e384, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": 25.26 `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "decimalFloat34": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Decimal Floating Point Number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Decimal floating point number with 34 places", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -9.999999999999999999999999999999999e6144, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 9.999999999999999999999999999999999e6144, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": 123.05 `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "packedNumber": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Packed Number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Packed number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "number", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -999.99, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 999.99 , `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "multipleOf": 0.01, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": 123.45 `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "numericText": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Numeric Text Field", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Numeric text field", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 4, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "pattern": "^[0-9]+$", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "1067" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "characterText": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Character Text", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Character text", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 5, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "abcde" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "stringText": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "String Text", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "String text", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "Default text" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "dateField": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Date", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Date", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "format": "date-time", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "1972-04-01" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "timeField": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Time", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Time", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "format": "date-time", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "20:15:00" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "dateTimeField": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Date Time", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Date time: No support", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "format": "date-time" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "boolTrue": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Boolean", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Boolean with default abap_true", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "boolean", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": true `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "boolFalse": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Boolean", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Boolean with default abap_false", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "boolean", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": false `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      "enumType": { `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Enum Type", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Enum type", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "enum": [ `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`          "general", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`          "exitClass" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        ], `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "enumTitles": [ `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`          "General", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`          "Exit Class" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        ], `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "enumDescriptions": [ `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`          "General", `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`          "Exit class" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        ], `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`        "default": "exitClass" `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`      } `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`    }, `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false `), target: temp1004});
    abap.statements.append({source: new abap.types.String().set(`  } `), target: temp1004});
    abap.statements.append({source: temp1149, target: temp1004});
    exp_schema.set(temp1004);
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation $default for type UTCLONG is not supported`), exp_component_name: new abap.types.String().set(`STRUCTURE_DIFFERENT_DEFAULT-DATE_TIME_FIELD`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async structure_with_default_problem() {
    let temp1150 = new abap.types.Structure({"integer": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_DEFAULT_PROBLEM-INTEGER"}), "string_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_DEFAULT_PROBLEM-STRING_ELEMENT"}), "enum_required": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>structure_with_default_problem-enum_required"}), "enum_show_always": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>structure_with_default_problem-enum_show_always"})}, "zcl_aff_test_types=>structure_with_default_problem");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1151 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp144 = new abap.types.String();
    let temp145 = new abap.types.String();
    let temp146 = new abap.types.String();
    let temp1217 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1150);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp1150})));
    abap.statements.clear(temp1151);
    abap.statements.append({source: new abap.types.String().set(`    { `), target: temp1151});
    temp144.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp144, target: temp1151});
    temp145.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp145, target: temp1151});
    temp146.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp146, target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     "title": "Structure With Default",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     "description": "Structure with default",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     "type": "object",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     "properties": {`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       "integer": {`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Integer",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Integer",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "type": "integer",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "minimum": -2147483648,`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "maximum": 2147483647,`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "default": 5`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       },`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       "stringElement": {`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "title": "String Element",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "description": "String element with default value",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "default": "DefaultString"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       },`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       "enumRequired": {`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Enum Value",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Enum value with default",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "enum": [`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "general",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "exitClass"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         ],`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "enumTitles": [`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "General",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "Exit Class"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         ],`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "enumDescriptions": [`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "General",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "Exit class"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         ],`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "default": "exitClass"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       },`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       "enumShowAlways": {`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Enum Value",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Enum value with default",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "enum": [`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "general",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "exitClass"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         ],`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "enumTitles": [`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "General",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "Exit Class"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         ],`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "enumDescriptions": [`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "General",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`           "Exit class"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         ],`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`         "default": "exitClass"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       }`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     },`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     "additionalProperties": false,`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     "required": [`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       "integer",`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`       "enumRequired"`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`     ]`), target: temp1151});
    abap.statements.append({source: new abap.types.String().set(`   }`), target: temp1151});
    abap.statements.append({source: temp1217, target: temp1151});
    exp_schema.set(temp1151);
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg126, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_DEFAULT_PROBLEM-INTEGER`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg126, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_DEFAULT_PROBLEM-ENUM_REQUIRED`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async nested_struc_with_default() {
    let temp1218 = new abap.types.Structure({"outer_component": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>NESTED_STRUC_WITH_DEFAULT-OUTER_COMPONENT"}), "middle_struc": new abap.types.Structure({"middle_component": new abap.types.Character(4, {"qualifiedName":"zcl_aff_test_types=>middle_struc_with_default-middle_component"}), "inner_struc": new abap.types.Structure({"inner_component": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>INNER_STRUC_WITH_DEFAULT-INNER_COMPONENT"})}, "zcl_aff_test_types=>inner_struc_with_default")}, "zcl_aff_test_types=>middle_struc_with_default")}, "zcl_aff_test_types=>nested_struc_with_default");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1219 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp147 = new abap.types.String();
    let temp148 = new abap.types.String();
    let temp149 = new abap.types.String();
    let temp1268 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1218);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp1218})));
    abap.statements.clear(temp1219);
    abap.statements.append({source: new abap.types.String().set(`    { `), target: temp1219});
    temp147.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp147, target: temp1219});
    temp148.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp148, target: temp1219});
    temp149.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp149, target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`     "title": "Nested Structure", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`     "description": "Nested structure", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`     "type": "object", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`     "properties": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`       "outerComponent": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Outer Component", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Outer component", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "type": "integer", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "minimum": -2147483648, `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "maximum": 2147483647 , `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "default": 10 `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`       }, `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`       "middleStruc": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Middle Structure", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Middle structure", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "type": "object", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "properties": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`           "middleComponent": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "title": "Middle Component", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "description": "Middle component", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "type": "string", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "maxLength": 4, `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "default": "abcd" `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`           }, `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`           "innerStruc": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "title": "Inner Structure", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "description": "Inner structure", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "type": "object", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "properties": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`               "innerComponent": { `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`                 "title": "Inner Component", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`                 "description": "Inner component", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`                 "type": "string", `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`                 "default": "Default Value" `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`               } `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             }, `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`             "additionalProperties": false `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`           } `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         }, `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`         "additionalProperties": false `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`       } `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`     }, `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`     "additionalProperties": false `), target: temp1219});
    abap.statements.append({source: new abap.types.String().set(`   } `), target: temp1219});
    abap.statements.append({source: temp1268, target: temp1219});
    exp_schema.set(temp1219);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_wrong_default() {
    let temp1269 = new abap.types.Structure({"element_one": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category"}), "element_two": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category"})}, "zcl_aff_test_types=>structure_with_wrong_default");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1270 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp150 = new abap.types.String();
    let temp151 = new abap.types.String();
    let temp152 = new abap.types.String();
    let temp1316 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1269);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp1269})));
    abap.statements.clear(temp1270);
    abap.statements.append({source: new abap.types.String().set(`   { `), target: temp1270});
    temp150.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp150, target: temp1270});
    temp151.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp151, target: temp1270});
    temp152.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp152, target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`     "title": "Structure With Wrong Default", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`     "description": "Structure with wrong default", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`     "type": "object", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`     "properties": { `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`       "elementOne": { `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "title": "First Element",`), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "description": "First element", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "enum": [ `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "general", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "classicBadi" `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         ], `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "enumTitles": [ `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "generalCategory", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "" `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         ], `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "enumDescriptions": [ `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "General interface", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "Interface definition of a classic BAdI" `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         ] `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`       }, `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`       "elementTwo": { `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Second Element", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "description": "Second element", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "enum": [ `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "general", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "classicBadi" `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         ], `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "enumTitles": [ `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "generalCategory", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "" `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         ], `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         "enumDescriptions": [ `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "General interface", `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`           "Interface definition of a classic BAdI" `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`         ] `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`       } `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`     }, `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`     "additionalProperties": false `), target: temp1270});
    abap.statements.append({source: new abap.types.String().set(`   } `), target: temp1270});
    abap.statements.append({source: temp1316, target: temp1270});
    exp_schema.set(temp1270);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.Character(81).set('Component WRONG_COMPONENT of constant ENUM_VALUES in ABAP Doc link doesn\'t exist'), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_DEFAULT-ELEMENT_ONE`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`ENUM_VALUES-CLASSIC_BADI`)});
  }
  async element_with_callbackclas() {
    let temp1317 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1322 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>SIMPLE_CALLBACK"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1323 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp153 = new abap.types.String();
    let temp154 = new abap.types.String();
    let temp155 = new abap.types.String();
    let temp1333 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1317);
    abap.statements.append({source: new abap.types.String().set(`"title": "myStringName",`), target: temp1317});
    abap.statements.append({source: new abap.types.String().set(`"description": "This is a String",`), target: temp1317});
    abap.statements.append({source: new abap.types.String().set(`"type": "string",`), target: temp1317});
    abap.statements.append({source: new abap.types.String().set(`"maxLength": 3`), target: temp1317});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1317);
    abap.statements.clear(temp1322);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1322})));
    abap.statements.clear(temp1323);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp1323});
    temp153.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp153, target: temp1323});
    temp154.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp154, target: temp1323});
    temp155.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp155, target: temp1323});
    abap.statements.append({source: new abap.types.String().set(`    "title": "myStringName",`), target: temp1323});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a String",`), target: temp1323});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp1323});
    abap.statements.append({source: new abap.types.String().set(`    "maxLength": 3`), target: temp1323});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1323});
    abap.statements.append({source: temp1333, target: temp1323});
    exp_schema.set(temp1323);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_table_with_callbackclas() {
    let temp1334 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1344 = new abap.types.Table(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_callback");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1345 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp156 = new abap.types.String();
    let temp157 = new abap.types.String();
    let temp158 = new abap.types.String();
    let temp1360 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1334);
    abap.statements.append({source: new abap.types.String().set(`"title": "my_table",`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`"description": "A standard table of strings",`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`"type": "array",`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`"items": {`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`  "title": "myStringName",`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`  "description": "This is a String",`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`  "type": "string",`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`  "maxLength": 3`), target: temp1334});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1334});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1334);
    abap.statements.clear(temp1344);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1344})));
    abap.statements.clear(temp1345);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp1345});
    temp156.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp156, target: temp1345});
    temp157.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp157, target: temp1345});
    temp158.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp158, target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`    "title": "my_table",`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A standard table of strings",`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array",`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`        "title": "myStringName",`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`        "description": "This is a String",`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string",`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`        "maxLength": 3`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp1345});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1345});
    abap.statements.append({source: temp1360, target: temp1345});
    exp_schema.set(temp1345);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async table_with_call_of_struc() {
    let temp1361 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1386 = new abap.types.Table(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_callback");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1387 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp159 = new abap.types.String();
    let temp160 = new abap.types.String();
    let temp161 = new abap.types.String();
    let temp1417 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1361);
    abap.statements.append({source: new abap.types.String().set(`"title": "my_table_callback",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`"description": "A standard table of my_structure",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`"type": "array",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`"items": {`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  "title": "mySimpleStructureWithFallback",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  "description": "This is a simple structure",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  "type": "object",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  "properties": {`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "myFirstElement": {`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "title": "myStringName",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a String",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "minLength": 2`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  },`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  "mySecondElement": {`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "title": "mySecondElement",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is the second element",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "type": "integer",`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "minimum": -2147483648,`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    "maximum": 2147483647`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  },`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`  "additionalProperties": false`), target: temp1361});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1361});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1361);
    abap.statements.clear(temp1386);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1386})));
    abap.statements.clear(temp1387);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp1387});
    temp159.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp159, target: temp1387});
    temp160.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp160, target: temp1387});
    temp161.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp161, target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`    "title": "my_table_callback",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A standard table of my_structure",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`        "title": "mySimpleStructureWithFallback",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`        "description": "This is a simple structure",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`        "type": "object",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`        "properties": {`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`            "myFirstElement": {`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "title": "myStringName",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "description": "This is a String",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "type": "string",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "minLength": 2`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`            },`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`            "mySecondElement": {`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "title": "mySecondElement",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "description": "This is the second element",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "type": "integer",`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "minimum": -2147483648,`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`                "maximum": 2147483647`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`            }`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`        "additionalProperties": false`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp1387});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1387});
    abap.statements.append({source: temp1417, target: temp1387});
    exp_schema.set(temp1387);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async nested_table_with_callback() {
    let temp1418 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1432 = new abap.types.Table(new abap.types.Table(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>my_standard_table"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_call_of_table");
    let act_schema_co = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1433 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp162 = new abap.types.String();
    let temp1452 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1418);
    abap.statements.append({source: new abap.types.String().set(`"title": "my_table_of_table_callback", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`"description": "A standard table of my_table", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`"type": "array", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`"items": { `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`  "title": "nestedTable", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`  "description": "This is the inner Table", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`  "type": "array", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`  "items": { `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`    "title": "string", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`    "description": "string", `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string" `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`    } `), target: temp1418});
    abap.statements.append({source: new abap.types.String().set(`  } `), target: temp1418});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1418);
    abap.statements.clear(temp1432);
    act_schema_co.set((await this.test_generator.get().generate_type({data: temp1432})));
    abap.statements.clear(temp1433);
    abap.statements.append({source: new abap.types.String().set(` { `), target: temp1433});
    temp162.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp162, target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`    "$schema": "https://json-schema.org/draft/2020-12/schema", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`    "$id": "schema/id.json", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`    "title": "my_table_of_table_callback", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A standard table of my_table", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`    "items": { `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`      "title": "nestedTable", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`      "description": "This is the inner Table", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`      "type": "array", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`      "items": { `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`        "title": "string", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`        "description": "string", `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string" `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`      } `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`    } `), target: temp1433});
    abap.statements.append({source: new abap.types.String().set(`  } `), target: temp1433});
    abap.statements.append({source: temp1452, target: temp1433});
    exp_schema.set(temp1433);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async table_of_struc_with_callback() {
    let temp1453 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1464 = new abap.types.Table(new abap.types.Structure({"element_name": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_CALLBACK-ELEMENT_NAME"})}, "zcl_aff_test_types=>structure_callback"), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_of_struc_with_callback");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1465 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp163 = new abap.types.String();
    let temp164 = new abap.types.String();
    let temp165 = new abap.types.String();
    let temp1486 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1453);
    abap.statements.append({source: new abap.types.String().set(`"title": "myStructureFall",`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`"description": "myStructure",`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`"type": "object",`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`"properties": {`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`  "myElement": {`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`    "title": "myElement",`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`    "description": "myElement",`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string"`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`  }`), target: temp1453});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1453});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1453);
    abap.statements.clear(temp1464);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1464})));
    abap.statements.clear(temp1465);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp1465});
    temp163.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp163, target: temp1465});
    temp164.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp164, target: temp1465});
    temp165.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp165, target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`    "title": "my_table",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`    "description": "A standard table of my_structure_with_callback",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`        "title": "myStructureFall",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`        "description": "myStructure",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`        "type": "object",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`        "properties": {`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`            "myElement": {`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`                "title": "myElement",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`                "description": "myElement",`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`                "type": "string"`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`            }`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp1465});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1465});
    abap.statements.append({source: temp1486, target: temp1465});
    exp_schema.set(temp1465);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async struct_with_table_callback() {
    let temp1487 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1499 = new abap.types.Structure({"element_table_callback": new abap.types.Table(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_callback"), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUC_OF_TABLE_WITH_CALLBACK-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>struc_of_table_with_callback");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1500 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp166 = new abap.types.String();
    let temp167 = new abap.types.String();
    let temp168 = new abap.types.String();
    let temp1533 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1487);
    abap.statements.append({source: new abap.types.String().set(`"elementTableCallback": {`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`  "title": "myTableWithCallback",`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`  "description": "A standard table of strings",`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`  "type": "array",`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`  "items": {`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`    "title": "myStringName",`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a String",`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string",`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`    "maxLength": 3`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`  }`), target: temp1487});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1487});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1487);
    abap.statements.clear(temp1499);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1499})));
    abap.statements.clear(temp1500);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp1500});
    temp166.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp166, target: temp1500});
    temp167.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp167, target: temp1500});
    temp168.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp168, target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`    "title": "mySimpleStructure",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a simple structure",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`        "elementTableCallback": {`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "title": "myTableWithCallback",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "description": "A standard table of strings",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "type": "array",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "items": {`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`                "title": "myStringName",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`                "description": "This is a String",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`                "type": "string",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`                "maxLength": 3`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            }`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`        "mySecondElement": {`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Second Element",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the second element",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false,`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`    "required": [ `), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`     "elementTableCallback" `), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`  ]`), target: temp1500});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1500});
    abap.statements.append({source: temp1533, target: temp1500});
    exp_schema.set(temp1500);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async struc_with_struc_callback() {
    let temp1534 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1550 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUC_IN_STRUC_WITH_CALLBACK-MY_FIRST_ELEMENT"}), "element_structure_callback": new abap.types.Structure({"element_name": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_CALLBACK-ELEMENT_NAME"})}, "zcl_aff_test_types=>structure_callback"), "my_third_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUC_IN_STRUC_WITH_CALLBACK-MY_THIRD_ELEMENT"})}, "zcl_aff_test_types=>struc_in_struc_with_callback");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1551 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp169 = new abap.types.String();
    let temp170 = new abap.types.String();
    let temp171 = new abap.types.String();
    let temp1593 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1534);
    abap.statements.append({source: new abap.types.String().set(`"elementStructureCallback": {`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`  "title": "myStrucWithCallback",`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`  "description": "A simple structure",`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`  "type": "object",`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`  "properties": {`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`    "myElement": {`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`      "title": "element",`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`      "description": "This is a integer",`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`      "type": "integer",`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`      "minimum": -2147483648,`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`      "maximum": 2147483647`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`    }`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`  },`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`  "additionalProperties": false`), target: temp1534});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1534});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1534);
    abap.statements.clear(temp1550);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1550})));
    abap.statements.clear(temp1551);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp1551});
    temp169.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp169, target: temp1551});
    temp170.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp170, target: temp1551});
    temp171.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp171, target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`    "title": "mySimpleStructure",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a simple structure",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`        "myFirstElement": {`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "title": "First Element",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the first element",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string"`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`        "elementStructureCallback": {`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "title": "myStrucWithCallback",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "description": "A simple structure",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "type": "object",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "properties": {`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`                "myElement": {`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`                    "title": "element",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`                    "description": "This is a integer",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`                    "type": "integer",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`                    "minimum": -2147483648,`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`                    "maximum": 2147483647`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`                }`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            },`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "additionalProperties": false`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`         },`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`        "myThirdElement": {`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Third Element",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the third element",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false,`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`    "required": [ `), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`     "elementStructureCallback" `), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`  ]`), target: temp1551});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1551});
    abap.statements.append({source: temp1593, target: temp1551});
    exp_schema.set(temp1551);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async element_in_structure_callback() {
    let temp1594 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1601 = new abap.types.Structure({"element_callback": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_ELEM_CALLBACK-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>structure_with_elem_callback");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1602 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp172 = new abap.types.String();
    let temp173 = new abap.types.String();
    let temp174 = new abap.types.String();
    let temp1630 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1594);
    abap.statements.append({source: new abap.types.String().set(`"elementCallback": {`), target: temp1594});
    abap.statements.append({source: new abap.types.String().set(`  "title": "myStringName",`), target: temp1594});
    abap.statements.append({source: new abap.types.String().set(`  "description": "This is a String",`), target: temp1594});
    abap.statements.append({source: new abap.types.String().set(`  "type": "string",`), target: temp1594});
    abap.statements.append({source: new abap.types.String().set(`  "minLength": 2`), target: temp1594});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1594});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp1594);
    abap.statements.clear(temp1601);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1601})));
    abap.statements.clear(temp1602);
    abap.statements.append({source: new abap.types.String().set(`{`), target: temp1602});
    temp172.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp172, target: temp1602});
    temp173.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp173, target: temp1602});
    temp174.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp174, target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Simple Structure",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    "description": "This is a simple structure",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    "properties": {`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`        "elementCallback": {`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "title": "myStringName",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is a String",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "type": "string",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "minLength": 2`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`        },`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`        "mySecondElement": {`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "title": "Second Element",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "description": "This is the second element",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "type": "integer",`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "minimum": -2147483648,`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`            "maximum": 2147483647`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`        }`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    },`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    "additionalProperties": false,`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    "required": [`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`      "elementCallback"`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`    ]`), target: temp1602});
    abap.statements.append({source: new abap.types.String().set(`}`), target: temp1602});
    abap.statements.append({source: temp1630, target: temp1602});
    exp_schema.set(temp1602);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_wrong_callback() {
    let temp1631 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_WRONG_CALLBACK-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>structure_with_wrong_callback");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1632 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp175 = new abap.types.String();
    let temp176 = new abap.types.String();
    let temp177 = new abap.types.String();
    let temp1660 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1631);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1631})));
    abap.statements.clear(temp1632);
    abap.statements.append({source: new abap.types.String().set(`   { `), target: temp1632});
    temp175.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp175, target: temp1632});
    temp176.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp176, target: temp1632});
    temp177.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp177, target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     "title": "Structure With Wrong Callback", `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     "description": "Structure with wrong callback", `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     "type": "object", `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     "properties": { `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`       "myFirstElement": { `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "title": "First Element", `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "description": "This is the first element", `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string", `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "minLength": 2 `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`       }, `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`       "mySecondElement": { `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "title": "Second Element",`), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "description": "This is the second element",`), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "type": "integer", `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "minimum": -2147483648, `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`         "maximum": 4 `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`       } `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     }, `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     "additionalProperties": false, `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     "required": [`), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`       "myFirstElement"`), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`     ] `), target: temp1632});
    abap.statements.append({source: new abap.types.String().set(`   } `), target: temp1632});
    abap.statements.append({source: temp1660, target: temp1632});
    exp_schema.set(temp1632);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg106, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_CALLBACK-MY_FIRST_ELEMENT`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation ${abap.templateFormatting(abap.Classes['ZCL_AFF_ABAP_DOC_PARSER'].abap_doc_annotation.get().callback_class)} was used incorrectly`), exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_CALLBACK-MY_SECOND_ELEMENT`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async structure_no_title_descr() {
    let temp1661 = new abap.types.Structure({"field1": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_NO_TITLE_DESCR-FIELD1"}), "inner_struc": new abap.types.Structure({"inner_field": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INNER_STRUC_NO_TITLE_DESCR-INNER_FIELD"})}, "zcl_aff_test_types=>inner_struc_no_title_descr"), "inner_table": new abap.types.Table(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_no_title_descr")}, "zcl_aff_test_types=>structure_no_title_descr");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1662 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp178 = new abap.types.String();
    let temp179 = new abap.types.String();
    let temp180 = new abap.types.String();
    let temp1696 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1661);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1661})));
    abap.statements.clear(temp1662);
    abap.statements.append({source: new abap.types.String().set(`   { `), target: temp1662});
    temp178.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp178, target: temp1662});
    temp179.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp179, target: temp1662});
    temp180.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp180, target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object", `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`    "properties": { `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`      "field1": { `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Only description",`), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string" `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`    }, `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`    "innerStruc": { `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`      "title": "Only Title",`), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`       "type": "object", `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`       "properties": { `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`         "innerField": { `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`           "title": "Inner Field",`), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`           "description": "Inner field",`), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`           "type": "integer", `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`           "minimum": -2147483648, `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`           "maximum": 2147483647 `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`         } `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`       }, `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`       "additionalProperties": false `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`     }, `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`     "innerTable": { `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`       "type": "array", `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`       "items": { `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`         "type": "string" `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`       } `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`     } `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`   }, `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(`   "additionalProperties": false `), target: temp1662});
    abap.statements.append({source: new abap.types.String().set(` } `), target: temp1662});
    abap.statements.append({source: temp1696, target: temp1662});
    exp_schema.set(temp1662);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-FIELD1`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-INNER_STRUC`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-INNER_TABLE`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-INNER_TABLE`)});
  }
  async element_no_title_descr() {
    let temp1697 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>ELEMENT_NO_TITLE_DESCR"});
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1698 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp181 = new abap.types.String();
    let temp182 = new abap.types.String();
    let temp183 = new abap.types.String();
    let temp1705 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1697);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1697})));
    abap.statements.clear(temp1698);
    abap.statements.append({source: new abap.types.String().set(`   { `), target: temp1698});
    temp181.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp181, target: temp1698});
    temp182.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp182, target: temp1698});
    temp183.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp183, target: temp1698});
    abap.statements.append({source: new abap.types.String().set(`    "type": "string" `), target: temp1698});
    abap.statements.append({source: new abap.types.String().set(` } `), target: temp1698});
    abap.statements.append({source: temp1705, target: temp1698});
    exp_schema.set(temp1698);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`ELEMENT_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`ELEMENT_NO_TITLE_DESCR`)});
  }
  async table_no_title_descr() {
    let temp1706 = new abap.types.Table(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_no_title_descr");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1707 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp184 = new abap.types.String();
    let temp185 = new abap.types.String();
    let temp186 = new abap.types.String();
    let temp1717 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1706);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1706})));
    abap.statements.clear(temp1707);
    abap.statements.append({source: new abap.types.String().set(`   { `), target: temp1707});
    temp184.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp184, target: temp1707});
    temp185.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp185, target: temp1707});
    temp186.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp186, target: temp1707});
    abap.statements.append({source: new abap.types.String().set(`    "type": "array", `), target: temp1707});
    abap.statements.append({source: new abap.types.String().set(`    "items": {`), target: temp1707});
    abap.statements.append({source: new abap.types.String().set(`      "type": "string" `), target: temp1707});
    abap.statements.append({source: new abap.types.String().set(`    } `), target: temp1707});
    abap.statements.append({source: new abap.types.String().set(` } `), target: temp1707});
    abap.statements.append({source: temp1717, target: temp1707});
    exp_schema.set(temp1707);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`TABLE_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`TABLE_NO_TITLE_DESCR`)});
  }
  async structure_with_include() {
    let temp1718 = new abap.types.Structure({"first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_INCLUDE_TYPE-FIRST_ELEMENT"}), "second_element": new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure"), "third_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_INCLUDE_TYPE-THIRD_ELEMENT"}), "other_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_INCLUDE-OTHER_ELEMENT"}), "other_structure": new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure")}, "zcl_aff_test_types=>structure_with_include");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1719 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp187 = new abap.types.String();
    let temp188 = new abap.types.String();
    let temp189 = new abap.types.String();
    let temp1795 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1718);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1718})));
    abap.statements.clear(temp1719);
    abap.statements.append({source: new abap.types.String().set(`   { `), target: temp1719});
    temp187.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp187, target: temp1719});
    temp188.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp188, target: temp1719});
    temp189.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp189, target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Structure With Include", `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`    "description": "Structure with include", `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object", `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`    "properties": { `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      "firstElement": { `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "title": "First Element In Include",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string" `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      }, `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      "secondElement": { `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "title": "mySimpleStructure",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "description": "This is a simple structure",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`         "type": "object", `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`         "properties": {`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`           "myFirstElement": {`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "title": "First Element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "description": "This is the first element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "type": "string",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "minLength": 4`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`            },`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`            "mySecondElement": {`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "title": "Second Element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "description": "This is the second element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "type": "integer",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "minimum": -2147483648,`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`              "maximum": 2147483647`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`            }`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`         },`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`         "additionalProperties": false`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      "thirdElement": {`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Third Element In Include",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Third element in include",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -2147483648,`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 2147483647,`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "default": 10`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      "otherElement": { `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Other element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "type": "integer",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "minimum": -2147483648,`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "maximum": 2147483647`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      },`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      "otherStructure": { `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Other structure",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Other Structure",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "type": "object", `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`         "properties": {`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`           "myFirstElement": {`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "title": "First Element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "description": "This is the first element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "type": "string",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "minLength": 4`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`           },`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`           "mySecondElement": {`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "title": "Second Element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "description": "This is the second element",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "type": "integer",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "minimum": -2147483648,`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`             "maximum": 2147483647`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`           }`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`         },`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`        "additionalProperties": false`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`      }`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`   }, `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`   "additionalProperties": false, `), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`   "required": [`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`     "firstElement",`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`     "otherElement"`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(`   ]`), target: temp1719});
    abap.statements.append({source: new abap.types.String().set(` } `), target: temp1719});
    abap.statements.append({source: temp1795, target: temp1719});
    exp_schema.set(temp1719);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_INCLUDE-OTHER_ELEMENT`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`TY_INCLUDE_TYPE-FIRST_ELEMENT`)});
  }
  async description_too_long() {
    let temp1796 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>TYPE_WITH_LONG_DESCRIPTION"});
    abap.statements.clear(temp1796);
    await this.test_generator.get().generate_type({data: temp1796});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description exceeds ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_max_length_of_description)} characters and might be too long`), exp_component_name: new abap.types.String().set(`TYPE_WITH_LONG_DESCRIPTION`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async get_extrema_integer() {
    let val = new abap.types.Integer({qualifiedName: "I"});
    let temp1797 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp1797, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp1797, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-2147483648`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`2147483647`), act: max});
  }
  async get_extrema_decfloat16() {
    let val = new abap.types.typeTodoDecFloat16Type();
    let temp1798 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp1798, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp1798, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-9.999999999999999e384`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`9.999999999999999e384`), act: max});
  }
  async get_extrema_ftype() {
    let val = new abap.types.Float({qualifiedName: "F"});
    let temp1799 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp1799, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp1799, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-1.7976931348623157e308`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`1.7976931348623157e308`), act: max});
  }
  async get_extrema_packed() {
    let val = new abap.types.Packed({length: 14, decimals: 2});
    let temp1800 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp1800, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp1800, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-9999999999999999999999999.99`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`9999999999999999999999999.99`), act: max});
  }
  async get_extrema_integer1() {
    let val = new abap.types.Integer({qualifiedName: "INT1"});
    let temp1801 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp1801, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp1801, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`0`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`255`), act: max});
  }
  async calculate_max_length() {
    let c_length_30 = new abap.types.Character(30, {});
    let temp1802 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let max_length = new abap.types.String({qualifiedName: "STRING"});
    let c_length_60 = new abap.types.Character(60, {});
    let temp1803 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    let n_length_10 = new abap.types.Numc({length: 10});
    let temp1804 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR"});
    await abap.statements.cast(temp1802, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: c_length_30})));
    max_length.set((await this.cut.get().get_max_length({element_description: temp1802})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.Integer().set(30), act: max_length});
    await abap.statements.cast(temp1803, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: c_length_60})));
    max_length.set((await this.cut.get().get_max_length({element_description: temp1803})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.Integer().set(60), act: max_length});
    await abap.statements.cast(temp1804, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: n_length_10})));
    max_length.set((await this.cut.get().get_max_length({element_description: temp1804})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.Integer().set(10), act: max_length});
  }
  async struc_with_own_enum_values() {
    let temp1805 = new abap.types.Structure({"enum_component": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>struc_with_own_enum_values-enum_component"})}, "zcl_aff_test_types=>struc_with_own_enum_values");
    let act_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp1806 = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    let temp190 = new abap.types.String();
    let temp191 = new abap.types.String();
    let temp192 = new abap.types.String();
    let temp1836 = new abap.types.String();
    let exp_schema = new abap.types.Table(new abap.types.String(), {"withHeader":false}, "STRING_TABLE");
    abap.statements.clear(temp1805);
    act_schema.set((await this.test_generator.get().generate_type({data: temp1805})));
    abap.statements.clear(temp1806);
    abap.statements.append({source: new abap.types.String().set(`   { `), target: temp1806});
    temp190.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.append({source: temp190, target: temp1806});
    temp191.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.append({source: temp191, target: temp1806});
    temp192.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.append({source: temp192, target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`    "title": "Structure With Overwritten Enum Values", `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`    "description": "Structure with overwritten enum values", `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`    "type": "object", `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`    "properties": { `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`      "enumComponent": { `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`        "title": "Enum Component",`), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`        "description": "Enum component",`), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`        "type": "string", `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`         "enum": [ `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`           "AAAA", `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`           "BBBB" `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`         ], `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`         "enumTitles": [ `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`           "Option 1", `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`           "Option 2" `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`         ], `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`         "enumDescriptions": [ `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`           "Option 1", `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`           "Option 2" `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`         ], `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`         "default": "AAAA"`), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`      } `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`   }, `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(`   "additionalProperties": false `), target: temp1806});
    abap.statements.append({source: new abap.types.String().set(` } `), target: temp1806});
    abap.statements.append({source: temp1836, target: temp1806});
    exp_schema.set(temp1806);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
}
abap.Classes['CLAS-ZCL_AFF_WRITER_JSON_SCHEMA-LTCL_JSON_WRITER_ABAP_DOC'] = ltcl_json_writer_abap_doc;
ltcl_json_writer_abap_doc.schema_id = new abap.types.String({qualifiedName: "STRING"});
ltcl_json_writer_abap_doc.schema_id.set('schema/id.json');
export {ltcl_json_writer, ltcl_json_writer_abap_doc};
//# sourceMappingURL=zcl_aff_writer_json_schema.clas.testclasses.mjs.map